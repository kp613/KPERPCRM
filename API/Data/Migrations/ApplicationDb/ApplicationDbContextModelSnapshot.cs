// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.data.migrations.applicationdb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.AdminModels.OurDeliveryAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OurDeliveryAddress");
                });

            modelBuilder.Entity("API.Models.AdminModels.ShareInvestment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GetShareDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GiveShare")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("OurCompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidIn")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Registrant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ShareConvert")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal>("ShareOption")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int>("ShareholderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OurCompanyId");

                    b.HasIndex("ShareholderId");

                    b.ToTable("ShareInvestment");
                });

            modelBuilder.Entity("API.Models.AdminModels.Shareholder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OurCompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OurCompanyId");

                    b.ToTable("Shareholder");
                });

            modelBuilder.Entity("API.Models.AdminModels.ShareholderForCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OurCompanyId")
                        .HasColumnType("int");

                    b.Property<double>("PaidTotal")
                        .HasColumnType("float");

                    b.Property<int>("ShareholderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubscribedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("SubscribedStock")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OurCompanyId");

                    b.HasIndex("ShareholderId");

                    b.ToTable("ShareholderForCompany");
                });

            modelBuilder.Entity("API.Models.CommonModels.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PayPeriod")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Principal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("API.Models.ProductModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CasNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductNameCN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StructureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDay")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CasNo")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Include", new[] { "ProductName", "ProductNameCN" });

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductName", "ProductNameCN");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComConstant", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("MolecularFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MolecularWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductComConstant");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComInfo", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("QuoteSuggest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductComInfo");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComInstruction", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductComInstruction");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComSynonym", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SynonymsCN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SynonymsEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductComSynonym");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComUse", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UseInCh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseInEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductComUse");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductUpOrDown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("UpOrDown")
                        .HasColumnType("bit");

                    b.Property<int>("UpOrDownId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UpOrDownId");

                    b.ToTable("ProductUpOrDown");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsControlClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassThirdId")
                        .HasColumnType("int");

                    b.Property<bool>("PermissionSell")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductControlClass");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupFirst", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameCh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductsGroupFirst");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupSecond", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameCh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductsGroupFirstId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductsGroupFirstId");

                    b.ToTable("ProductsGroupSecond");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupThird", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoGenerate")
                        .HasColumnType("bit");

                    b.Property<int?>("ClassThirdId")
                        .HasColumnType("int");

                    b.Property<string>("KeyElement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordCN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordEn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordEn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordEn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordEn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoKeyWordEn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoKeyWordEn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoKeyWordEn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoKeyWordEn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoKeyWordEn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrKeyWordEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrKeyWordEn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrKeyWordEn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrKeyWordEn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductsGroupSecondId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassThirdId");

                    b.HasIndex("ProductsGroupSecondId");

                    b.ToTable("ProductsGroupThird");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupThirdProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsGroupThirdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductsGroupThirdId");

                    b.ToTable("ProductsGroupThirdProducts");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsNoPublicity", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsException")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettleMan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeForControl")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDay")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.ToTable("ProductNoPublicity");
                });

            modelBuilder.Entity("API.Models.ProjectModels.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamSize")
                        .HasColumnType("int");

                    b.HasKey("ProjectID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("API.Models.Setting.KPErpCrmDesignRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrudState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<string>("FolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgressAndProblem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDay")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("KPErpCrmDesignRecord");
                });

            modelBuilder.Entity("API.Models.Settings.OurCompany", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Constitution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JuridicalPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherInf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PaidInCapital")
                        .HasColumnType("float");

                    b.Property<string>("RegAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegTel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RegisteredCapital")
                        .HasColumnType("float");

                    b.Property<string>("ServiceFeature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShareTotal")
                        .HasColumnType("float");

                    b.Property<string>("StockComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Web")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OurCompany");
                });

            modelBuilder.Entity("API.Models.AdminModels.ShareInvestment", b =>
                {
                    b.HasOne("API.Models.Settings.OurCompany", "OurCompany")
                        .WithMany()
                        .HasForeignKey("OurCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AdminModels.Shareholder", "Shareholder")
                        .WithMany()
                        .HasForeignKey("ShareholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OurCompany");

                    b.Navigation("Shareholder");
                });

            modelBuilder.Entity("API.Models.AdminModels.Shareholder", b =>
                {
                    b.HasOne("API.Models.Settings.OurCompany", null)
                        .WithMany("Shareholders")
                        .HasForeignKey("OurCompanyId");
                });

            modelBuilder.Entity("API.Models.AdminModels.ShareholderForCompany", b =>
                {
                    b.HasOne("API.Models.Settings.OurCompany", "OurCompany")
                        .WithMany()
                        .HasForeignKey("OurCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AdminModels.Shareholder", "Shareholder")
                        .WithMany()
                        .HasForeignKey("ShareholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OurCompany");

                    b.Navigation("Shareholder");
                });

            modelBuilder.Entity("API.Models.ProductModels.Product", b =>
                {
                    b.HasOne("API.Models.ProductModels.ProductsControlClass", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComConstant", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithOne("ProductComConstant")
                        .HasForeignKey("API.Models.ProductModels.ProductComConstant", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComInfo", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithOne("ProductComInfo")
                        .HasForeignKey("API.Models.ProductModels.ProductComInfo", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComInstruction", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithOne("ProductComInstruction")
                        .HasForeignKey("API.Models.ProductModels.ProductComInstruction", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComSynonym", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithOne("ProductComSynonym")
                        .HasForeignKey("API.Models.ProductModels.ProductComSynonym", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComUse", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithOne("ProductComUse")
                        .HasForeignKey("API.Models.ProductModels.ProductComUse", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductUpOrDown", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithMany("ProductUpOrDown")
                        .HasForeignKey("UpOrDownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupSecond", b =>
                {
                    b.HasOne("API.Models.ProductModels.ProductsGroupFirst", "ProductsGroupFirst")
                        .WithMany("ProductsGroupSeconds")
                        .HasForeignKey("ProductsGroupFirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductsGroupFirst");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupThird", b =>
                {
                    b.HasOne("API.Models.ProductModels.ProductsControlClass", null)
                        .WithMany("ClassThirds")
                        .HasForeignKey("ClassThirdId");

                    b.HasOne("API.Models.ProductModels.ProductsGroupSecond", "ProductsGroupSecond")
                        .WithMany("ProductsGroupThirds")
                        .HasForeignKey("ProductsGroupSecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductsGroupSecond");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupThirdProducts", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithMany("ProductsGroupThirdProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.ProductModels.ProductsGroupThird", "ProductsGroupThird")
                        .WithMany("ProductsGroupThirdProducts")
                        .HasForeignKey("ProductsGroupThirdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductsGroupThird");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsNoPublicity", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.Product", b =>
                {
                    b.Navigation("ProductComConstant");

                    b.Navigation("ProductComInfo");

                    b.Navigation("ProductComInstruction");

                    b.Navigation("ProductComSynonym");

                    b.Navigation("ProductComUse");

                    b.Navigation("ProductsGroupThirdProducts");

                    b.Navigation("ProductUpOrDown");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsControlClass", b =>
                {
                    b.Navigation("ClassThirds");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupFirst", b =>
                {
                    b.Navigation("ProductsGroupSeconds");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupSecond", b =>
                {
                    b.Navigation("ProductsGroupThirds");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupThird", b =>
                {
                    b.Navigation("ProductsGroupThirdProducts");
                });

            modelBuilder.Entity("API.Models.Settings.OurCompany", b =>
                {
                    b.Navigation("Shareholders");
                });
#pragma warning restore 612, 618
        }
    }
}
