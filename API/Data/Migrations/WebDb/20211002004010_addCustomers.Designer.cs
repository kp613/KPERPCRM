// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Data.Migrations.WebDb
{
    [DbContext(typeof(AppWebDbContext))]
    [Migration("20211002004010_addCustomers")]
    partial class addCustomers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.BusinessModels.InquiriedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InquiryId")
                        .HasColumnType("int");

                    b.Property<int>("InquiryStatus")
                        .HasColumnType("int");

                    b.Property<int?>("PriceForCustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InquiryId");

                    b.HasIndex("PriceForCustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("InquiriedProduct");
                });

            modelBuilder.Entity("API.Models.BusinessModels.Inquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyContacterId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("InquireContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InquireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeIn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyContacterId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Inquiry");
                });

            modelBuilder.Entity("API.Models.BusinessModels.PriceForCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InquiryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("PriceForCustomer");
                });

            modelBuilder.Entity("API.Models.CommonModels.Area", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaNameCh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryCode")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("API.Models.CustomerModels.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyQQ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyTel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyWeChat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNameCh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAbandoned")
                        .HasColumnType("bit");

                    b.Property<string>("ModificateMan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDay")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("API.Models.CustomerModels.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("API.Models.CustomerModels.CustomerBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankSwiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IsCanceled")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CustomerBank");
                });

            modelBuilder.Entity("API.Models.CustomerModels.CustomerContacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDimission")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QQ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeChat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CustomerContacter");
                });

            modelBuilder.Entity("API.Models.CustomerModels.CustomerRelateAnother", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerRelateId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.ToTable("CustomerRelateAnother");
                });

            modelBuilder.Entity("API.Models.ProductModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CasNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNameCN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StructureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDay")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComConstant", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("MolecularFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MolecularWeight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductComConstant");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComInfo", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("QuoteSuggest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductComInfo");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComInstruction", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductComInstruction");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComSynonym", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SynonymsCN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SynonymsEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductComSynonym");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComUse", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UseInCh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseInEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("ProductComUse");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductUpOrDown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("UpOrDown")
                        .HasColumnType("bit");

                    b.Property<int>("UpOrDownId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UpOrDownId");

                    b.ToTable("ProductUpOrDown");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupFirst", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameCh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductsGroupFirst");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupSecond", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameCh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductsGroupFirstId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductsGroupFirstId");

                    b.ToTable("ProductsGroupSecond");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupThird", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoGenerate")
                        .HasColumnType("bit");

                    b.Property<string>("KeyElement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordCN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordEn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordEn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordEn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordEn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoKeyWordEn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoKeyWordEn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoKeyWordEn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoKeyWordEn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoKeyWordEn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrKeyWordEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrKeyWordEn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrKeyWordEn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrKeyWordEn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductsGroupSecondId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductsGroupSecondId");

                    b.ToTable("ProductsGroupThird");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupThirdProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsGroupThirdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductsGroupThirdId");

                    b.ToTable("ProductsGroupThirdProducts");
                });

            modelBuilder.Entity("API.Models.WebModels.ProductPublishing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CASNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNameCN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductPublishing");
                });

            modelBuilder.Entity("API.Models.WebModels.WebMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ApplyingFor")
                        .HasColumnType("bit");

                    b.Property<string>("Auditor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuditorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Finalizer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MsgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublisherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Updatetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("WebMessageCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditorId");

                    b.HasIndex("Finalizer");

                    b.HasIndex("PublisherId");

                    b.HasIndex("WebMessageCategoryId");

                    b.ToTable("WebMessage");
                });

            modelBuilder.Entity("API.Models.WebModels.WebMessageCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MsgCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebMessageCategory");
                });

            modelBuilder.Entity("API.Models.WebModels.WebUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebUser");
                });

            modelBuilder.Entity("API.Models.BusinessModels.InquiriedProduct", b =>
                {
                    b.HasOne("API.Models.BusinessModels.Inquiry", "Inquiry")
                        .WithMany("InquiriedProducts")
                        .HasForeignKey("InquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.BusinessModels.PriceForCustomer", "PriceForCustomer")
                        .WithMany()
                        .HasForeignKey("PriceForCustomerId");

                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inquiry");

                    b.Navigation("PriceForCustomer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.BusinessModels.Inquiry", b =>
                {
                    b.HasOne("API.Models.CustomerModels.CustomerContacter", "CompanyContacter")
                        .WithMany("Inquiries")
                        .HasForeignKey("CompanyContacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.CustomerModels.Customer", "Company")
                        .WithMany("Inquiries")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyContacter");
                });

            modelBuilder.Entity("API.Models.CustomerModels.Customer", b =>
                {
                    b.HasOne("API.Models.CommonModels.Area", "SysArea")
                        .WithMany("Customers")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysArea");
                });

            modelBuilder.Entity("API.Models.CustomerModels.CustomerAddress", b =>
                {
                    b.HasOne("API.Models.CommonModels.Area", "CityOrDevZone")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.CustomerModels.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CompanyId");

                    b.Navigation("CityOrDevZone");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.Models.CustomerModels.CustomerBank", b =>
                {
                    b.HasOne("API.Models.CustomerModels.Customer", "Customer")
                        .WithMany("CustomerBanks")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.Models.CustomerModels.CustomerContacter", b =>
                {
                    b.HasOne("API.Models.CustomerModels.Customer", "Customer")
                        .WithMany("CustomerContacters")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.Models.CustomerModels.CustomerRelateAnother", b =>
                {
                    b.HasOne("API.Models.CustomerModels.Customer", "Customer")
                        .WithMany("CustomerRelateds")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComConstant", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithOne("ProductComConstant")
                        .HasForeignKey("API.Models.ProductModels.ProductComConstant", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComInfo", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithOne("ProductComInfo")
                        .HasForeignKey("API.Models.ProductModels.ProductComInfo", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComInstruction", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithOne("ProductComInstruction")
                        .HasForeignKey("API.Models.ProductModels.ProductComInstruction", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComSynonym", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithOne("ProductComSynonym")
                        .HasForeignKey("API.Models.ProductModels.ProductComSynonym", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductComUse", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithOne("ProductComUse")
                        .HasForeignKey("API.Models.ProductModels.ProductComUse", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductUpOrDown", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithMany("ProductUpOrDown")
                        .HasForeignKey("UpOrDownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupSecond", b =>
                {
                    b.HasOne("API.Models.ProductModels.ProductsGroupFirst", "ProductsGroupFirst")
                        .WithMany("ProductsGroupSeconds")
                        .HasForeignKey("ProductsGroupFirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductsGroupFirst");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupThird", b =>
                {
                    b.HasOne("API.Models.ProductModels.ProductsGroupSecond", "ProductsGroupSecond")
                        .WithMany("ProductsGroupThirds")
                        .HasForeignKey("ProductsGroupSecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductsGroupSecond");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupThirdProducts", b =>
                {
                    b.HasOne("API.Models.ProductModels.Product", "Product")
                        .WithMany("ProductsGroupThirdProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.ProductModels.ProductsGroupThird", "ProductsGroupThird")
                        .WithMany("ProductsGroupThirdProducts")
                        .HasForeignKey("ProductsGroupThirdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductsGroupThird");
                });

            modelBuilder.Entity("API.Models.WebModels.WebMessage", b =>
                {
                    b.HasOne("API.Models.WebModels.WebUser", "WebUserAuditor")
                        .WithMany()
                        .HasForeignKey("AuditorId");

                    b.HasOne("API.Models.WebModels.WebUser", "WebUserFinalizer")
                        .WithMany()
                        .HasForeignKey("Finalizer");

                    b.HasOne("API.Models.WebModels.WebUser", "WebUserPublisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.HasOne("API.Models.WebModels.WebMessageCategory", "WebMessageCategory")
                        .WithMany("WebMessages")
                        .HasForeignKey("WebMessageCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebMessageCategory");

                    b.Navigation("WebUserAuditor");

                    b.Navigation("WebUserFinalizer");

                    b.Navigation("WebUserPublisher");
                });

            modelBuilder.Entity("API.Models.BusinessModels.Inquiry", b =>
                {
                    b.Navigation("InquiriedProducts");
                });

            modelBuilder.Entity("API.Models.CommonModels.Area", b =>
                {
                    b.Navigation("CustomerAddress");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("API.Models.CustomerModels.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerBanks");

                    b.Navigation("CustomerContacters");

                    b.Navigation("CustomerRelateds");

                    b.Navigation("Inquiries");
                });

            modelBuilder.Entity("API.Models.CustomerModels.CustomerContacter", b =>
                {
                    b.Navigation("Inquiries");
                });

            modelBuilder.Entity("API.Models.ProductModels.Product", b =>
                {
                    b.Navigation("ProductComConstant");

                    b.Navigation("ProductComInfo");

                    b.Navigation("ProductComInstruction");

                    b.Navigation("ProductComSynonym");

                    b.Navigation("ProductComUse");

                    b.Navigation("ProductsGroupThirdProducts");

                    b.Navigation("ProductUpOrDown");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupFirst", b =>
                {
                    b.Navigation("ProductsGroupSeconds");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupSecond", b =>
                {
                    b.Navigation("ProductsGroupThirds");
                });

            modelBuilder.Entity("API.Models.ProductModels.ProductsGroupThird", b =>
                {
                    b.Navigation("ProductsGroupThirdProducts");
                });

            modelBuilder.Entity("API.Models.WebModels.WebMessageCategory", b =>
                {
                    b.Navigation("WebMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
